Instructions:
DLL: Palindrome Checker (âš¡Interview Question)
Write a method to determine whether a given doubly linked list reads the same forwards and backwards.

For example, if the list contains the values [1, 2, 3, 2, 1], then the method should return True, since the list is a palindrome.

If the list contains the values [1, 2, 3, 4, 5], then the method should return False, since the list is not a palindrome.

Method name:
is_palindrome

*** Solution Explanation ***
def is_palindrome(self):
        if self.length <= 1:
            return True
        forward_node = self.head
        backward_node = self.tail
        for i in range(self.length // 2):
            if forward_node.value != backward_node.value:
                return False
            forward_node = forward_node.next
            backward_node = backward_node.prev
        return True


The is_palindrome method in a doubly linked list checks whether the list is a palindrome, meaning that it reads the same forwards and backwards.

Here's how the method works:

If the length of the list is less than or equal to 1, then the list is a palindrome by definition, so the method returns True.

The method initializes two pointers, forward_node and backward_node, that point to the head and tail of the list, respectively. The method then iterates over half of the list, comparing the values of the nodes at each end of the list to see if they are the same.

If the values of the nodes do not match, the method returns False, indicating that the list is not a palindrome. If all of the values match, the method returns True, indicating that the list is a palindrome.


This implementation of the method takes advantage of the fact that a doubly linked list allows for efficient traversal from both ends of the list, which makes it possible to check if the list is a palindrome in O(n) time, where n is the length of the list.



Code with inline comments:



def is_palindrome(self):
    # If the length of the list is 0 or 1, it is always a palindrome
    if self.length <= 1:
        return True
    
    # Create two pointers, one starting from the head and the other from the tail
    forward_node = self.head
    backward_node = self.tail
    
    # Iterate over half of the list
    for i in range(self.length // 2):
        # If the values at the two ends of the list do not match, the list is not a palindrome
        if forward_node.value != backward_node.value:
            return False
        
        # Move the two pointers towards each other
        forward_node = forward_node.next
        backward_node = backward_node.prev
    
    # If all values matched, the list is a palindrome
    return True